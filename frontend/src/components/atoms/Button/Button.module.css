.button {
  padding: var(--button-padding); /* Use global */
  border: none;
  border-radius: var(--button-radius); /* Use global */
  font-size: var(--button-font-size); /* Use global */
  font-weight: var(--font-weight-medium); /* Use global */
  cursor: pointer;
  transition: background 0.2s, color 0.2s, box-shadow 0.2s;
  outline: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5em; /* Maintained for buttons with text and icon */
  box-shadow: none;
  text-decoration: none; /* In case it's used as a link styled as button */
}

.iconWrapper {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

/* Styles for icon-only buttons */
.iconOnly {
  padding: var(--button-icon-only-padding, 0.5rem); /* Equal padding for roundness */
  border-radius: var(--button-icon-only-radius, 50%);
  gap: 0; /* No gap needed if only icon */
}

/* Ensure icon only buttons maintain a sensible minimum size based on icon */
.iconOnly .iconWrapper {
  /* The icon itself will define the size largely */
}

.primary {
  background: var(--primary-color);
  color: var(--text-color-light);
}
.primary:hover,
.primary:focus {
  background: var(--primary-color-dark);
}

.secondary {
  background: var(--secondary-color);
  color: var(--text-color-light); /* Text on pink bg should be light */
}
.secondary:hover,
.secondary:focus {
  background: var(--secondary-color-dark); /* Use dark shade of pink */
}

.danger {
  background: var(--error-color); /* Use theme error color */
  color: var(--text-color-light);
}
.danger:hover,
.danger:focus {
  background: var(--error-color-dark); /* Use dark shade of error */
}

.success {
  background: var(--success-color);
  color: var(--text-color-light);
}
.success:hover,
.success:focus {
  background: var(--success-color-dark); /* Use dark shade of success */
}

.outline {
  background: transparent;
  color: var(--primary-color);
  border: 2px solid var(--primary-color); /* Keep border for outline */
}
.outline:hover,
.outline:focus {
  background: var(--primary-color);
  color: var(--text-color-light);
}

/* Add a new 'neutral' or 'light' variant for gray button if needed */
.neutral {
  background: var(--background-color-secondary); /* e.g. light gray */
  color: var(--text-color);
  border: 1px solid var(--border-color);
}
.neutral:hover,
.neutral:focus {
  background: var(--border-color); /* Slightly darker gray */
}


.sm {
  padding: var(--spacing-xs) var(--spacing-sm); /* Use spacing variables */
  font-size: var(--font-size-sm); /* Use font-size variables */
}
.md {
  padding: var(--spacing-sm) var(--spacing-md);
  font-size: var(--font-size-base);
}
.lg {
  padding: var(--spacing-md) var(--spacing-lg);
  font-size: var(--font-size-lg);
}

.button:disabled,
.button[aria-busy='true'] {
  background: var(--input-background-color-disabled); /* Use global disabled bg */
  color: var(--text-color-disabled); /* Use global disabled text */
  cursor: not-allowed;
  opacity: var(--opacity-disabled); /* Use global opacity */
  border-color: var(--border-color); /* Optional: make border less prominent */
}

.loader {
  width: 1.2em;
  height: 1.2em;
  border: 2px solid var(--text-color-light); /* Assuming loader is on colored button */
  border-top-color: transparent; /* Make only one part of border visible for spinning effect against button bg */
  border-radius: var(--border-radius-circle);
  animation: spin var(--loader-speed) linear infinite; /* Use global loader speed */
  display: inline-block;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
} 