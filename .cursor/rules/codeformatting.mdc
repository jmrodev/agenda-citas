---
description: 
globs: 
alwaysApply: true
---
# ⚠️ IMPORTANTE: NUNCA usar el script manualmente
**NUNCA** ejecutes el script `./start-app.sh` manualmente durante el desarrollo.
**NUNCA** ejecutes comandos como `pnpm dev`, `node index.js`, `npm start` o similares.

**YO me encargo de ejecutar el script al inicio del proyecto.**
Los servidores se reinician automáticamente con cada cambio de código.

---

Rule Name: codeformatting
Description: 
Convenciones de formateo de código para el proyecto:

### ESLINT CONFIGURATION:
- Usar configuración base de ESLint para React y Node.js
- Reglas estrictas para evitar errores comunes
- Preferir arrow functions para componentes funcionales
- No permitir variables no utilizadas
- Requerir return types en funciones TypeScript (si se usa)

### PRETTIER CONFIGURATION:
- 2 espacios para indentación
- Comillas simples para strings
- Punto y coma al final de statements
- Llaves de apertura en la misma línea (K&R style)
- Línea máxima de 80-100 caracteres
- Trailing commas en objetos y arrays

### NAMING CONVENTIONS:
- camelCase para variables, funciones y propiedades
- PascalCase para componentes React y clases
- UPPER_SNAKE_CASE para constantes
- kebab-case para archivos CSS y rutas
- snake_case para nombres de base de datos y columnas

### FILE ORGANIZATION:
- Un componente por archivo
- Nombre del archivo igual al componente
- Agrupar imports: externos, internos, relativos
- Ordenar imports alfabéticamente
- Separar imports con líneas en blanco

### COMPONENT STRUCTURE:
```javascript
// 1. Imports
import React from 'react';
import styles from './Component.module.css';

// 2. PropTypes o TypeScript interfaces
// 3. Component definition
const Component = ({ prop1, prop2 }) => {
  // 4. Hooks
  const [state, setState] = useState();
  
  // 5. Event handlers
  const handleClick = () => {};
  
  // 6. Effects
  useEffect(() => {}, []);
  
  // 7. Render
  return <div>Content</div>;
};

// 8. Export
export default Component;
```

### CSS MODULES CONVENTIONS:
- Usar camelCase para class names
- Agrupar estilos relacionados
- Comentar secciones complejas
- Usar variables CSS para valores reutilizables
- Mobile-first responsive design

### BACKEND CODE STRUCTURE:
```javascript
// 1. Imports
const express = require('express');
const { validateInput } = require('../middleware/validation');

// 2. Router definition
const router = express.Router();

// 3. Route handlers
router.get('/endpoint', async (req, res) => {
  try {
    // 4. Validation
    // 5. Business logic
    // 6. Response
  } catch (error) {
    // 7. Error handling
  }
});

// 8. Export
module.exports = router;
```

### COMMENTS & DOCUMENTATION:
- Comentar lógica compleja o no obvia
- Usar JSDoc para funciones públicas
- Documentar APIs con ejemplos
- Mantener README actualizado
- Comentar decisiones de arquitectura importantes

### GIT COMMIT CONVENTIONS:
- Usar Conventional Commits
- Prefijos: feat, fix, docs, style, refactor, test, chore
- Mensajes descriptivos y concisos
- Referenciar issues cuando sea apropiado

### FOLDER STRUCTURE:
```
src/
├── components/
│   ├── atoms/
│   ├── molecules/
│   ├── organisms/
│   └── templates/
├── pages/
├── hooks/
├── utils/
├── services/
└── styles/
```

### IMPORT/EXPORT PATTERNS:
- Usar named exports para utilities
- Usar default exports para componentes
- Agrupar exports relacionados
- Evitar barrel exports innecesarios
- Preferir imports específicos sobre wildcard imports

