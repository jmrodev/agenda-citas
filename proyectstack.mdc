# Stack Tecnológico - Agenda de Citas

## 🏗️ Arquitectura General
- **Frontend**: React 19.1.0 con Vite 7.0.0
- **Backend**: Node.js con Express.js
- **Base de Datos**: MySQL (MariaDB)
- **Package Manager**: pnpm
- **Autenticación**: JWT (JSON Web Tokens)

## 🎯 Frontend Stack

### Core Technologies
- **React**: 19.1.0 (Functional Components + Hooks)
- **Vite**: 7.0.0 (Build tool y dev server)
- **React Router**: 7.6.3 (Navegación)
- **Material-UI**: 7.2.0 (Componentes UI)
- **Emotion**: 11.14.0 (Styling)

### Estructura de Componentes (Atomic Design)
```
frontend/src/components/
├── atoms/          # Componentes básicos (Button, Input, etc.)
├── molecules/      # Combinaciones de átomos (FormField, Card, etc.)
├── organisms/      # Componentes complejos (Forms, Tables, etc.)
├── templates/      # Layouts (DashboardLayout, etc.)
└── pages/          # Páginas completas
```

### Styling
- **CSS Modules**: Para estilos scoped
- **Variables CSS**: Sistema de design tokens
- **Mobile First**: Responsive design
- **Convenciones**: camelCase para class names

### Estado y Data Fetching
- **React Hooks**: useState, useEffect, useContext
- **Custom Hooks**: useForm, useDoctor, InactivityHandler
- **Context API**: DoctorContext, ViewModeContext
- **Fetch API**: Para comunicación con backend

## 🔧 Backend Stack

### Core Technologies
- **Node.js**: Runtime JavaScript
- **Express.js**: Framework web
- **MySQL**: Base de datos relacional
- **JWT**: Autenticación y autorización

### Estructura del Backend
```
backend/
├── config/         # Configuración de BD
├── controllers/    # Lógica de negocio
├── middleware/     # Auth, validación, etc.
├── models/         # Modelos de datos
├── routes/         # Definición de endpoints
├── services/       # Servicios de negocio
├── utils/          # Utilidades
└── filters/        # Filtros y validación
```

### Middleware y Validación
- **Joi**: Validación de esquemas
- **Express Validator**: Validación de requests
- **Custom Middleware**: Auth, roles, paginación

### Base de Datos
- **MySQL/MariaDB**: Base de datos principal
- **Connection Pooling**: Para optimización
- **Migrations**: Scripts SQL para cambios de esquema

## 🔐 Autenticación y Autorización

### Roles de Usuario
- **admin**: Acceso completo al sistema
- **doctor**: Gestión de citas y pacientes
- **secretary**: Gestión de citas y pacientes

### JWT Implementation
- **Access Tokens**: Para autenticación
- **Role-based Access**: Control de permisos
- **Token Refresh**: Renovación automática

## 📊 Base de Datos

### Credenciales
- **Usuario**: jmro
- **Contraseña**: jmro1975
- **Base de datos**: agenda_citas
- **Host**: localhost
- **Puerto**: 3306

### Tablas Principales
- `users`: Usuarios del sistema
- `patients`: Pacientes
- `doctors`: Doctores
- `appointments`: Citas
- `doctor_consultation_hours`: Horarios de consulta
- `health_insurances`: Obras sociales
- `patient_references`: Personas de referencia

## 🚀 Desarrollo y Deployment

### Scripts de Desarrollo
```bash
# ⚠️ IMPORTANTE: NUNCA usar el script manualmente
# NUNCA ejecutes: ./start-app.sh, pnpm dev, node index.js, npm start, etc.

# YO me encargo de ejecutar el script al inicio del proyecto
# Los servidores se reinician automáticamente con cada cambio de código
```

### URLs de Desarrollo
- **Frontend**: http://localhost:3000
- **Backend**: http://localhost:3001
- **API Base**: http://localhost:3001/api

### Testing API
```bash
# Login como admin
POST http://localhost:3001/api/auth/login
Content-Type: application/json

{
  "email": "admin@mail.com",
  "password": "Admin1234"
}
```

## 🎨 Convenciones de Código

### JavaScript/React
- **ES Modules**: import/export
- **Functional Components**: Con Hooks
- **camelCase**: Variables y funciones
- **PascalCase**: Componentes React
- **2 espacios**: Indentación
- **Punto y coma**: Al final de statements
- **Comillas simples**: Para strings

### CSS
- **CSS Modules**: Para scoped styles
- **camelCase**: Class names
- **Variables CSS**: Para valores reutilizables
- **Mobile First**: Responsive design

### Base de Datos
- **snake_case**: Nombres de tablas y columnas
- **Índices**: Para optimización de queries
- **Constraints**: Para integridad de datos

## 🔧 Herramientas de Desarrollo

### Linting y Formateo
- **ESLint**: Para JavaScript/React
- **Prettier**: Formateo de código
- **Vite**: Build tool y dev server

### Debugging
- **Console.log**: Para debugging básico
- **React DevTools**: Para debugging de componentes
- **MySQL Workbench**: Para debugging de BD

## 📱 Responsive Design

### Breakpoints
- **Mobile**: < 768px
- **Tablet**: 768px - 1024px
- **Desktop**: > 1024px

### Componentes Responsive
- **Sidebar**: Colapsable en mobile
- **Tables**: Scroll horizontal en mobile
- **Forms**: Stack vertical en mobile
- **Modals**: Full screen en mobile

## 🔄 Workflow de Desarrollo

### Flujo Típico
1. **Desarrollo**: YO ejecuto el script al inicio, servidores se reinician automáticamente
2. **Testing**: Pruebas manuales en navegador
3. **API Testing**: Usando archivos .http
4. **Database**: Consultas directas en MySQL
5. **Deployment**: Preparación para Vercel

### Hot Reload
- **Frontend**: Vite hot reload automático
- **Backend**: Node --watch autorestart
- **CSS**: Hot reload automático
- **API**: Restart automático con cambios

## 🚀 Deployment (Vercel)

### Frontend
- **Platform**: Vercel
- **Build Command**: `pnpm build`
- **Output Directory**: `dist`
- **Environment Variables**: Configuradas en Vercel

### Backend
- **Platform**: Vercel Functions
- **Runtime**: Node.js
- **Database**: MySQL externo
- **Environment Variables**: Para conexión BD

### Consideraciones
- **Database**: Externa (no incluida en Vercel)
- **Latencia**: Importante cercanía región Vercel-BD
- **Variables de Entorno**: Configuradas en Vercel
- **CORS**: Configurado para dominio de frontend
description:
globs:
alwaysApply: false
---
